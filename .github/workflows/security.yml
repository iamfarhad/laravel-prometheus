name: Security Audit

on:
  schedule:
    # Run security audit every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'composer.json'
      - 'composer.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'composer.json'
      - 'composer.lock'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write

jobs:
  composer-audit:
    name: Composer Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: '8.4'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-security-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-security-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run Composer Audit
        id: audit
        run: |
          echo "Running Composer security audit..."
          
          # Run audit and capture output
          if composer audit --format=json > audit-results.json; then
            echo "audit_status=clean" >> $GITHUB_OUTPUT
            echo "‚úÖ No security vulnerabilities found"
          else
            echo "audit_status=vulnerabilities_found" >> $GITHUB_OUTPUT
            echo "‚ùå Security vulnerabilities detected"
          fi
          
          # Display human-readable results
          composer audit || true

      - name: Upload audit results
        if: steps.audit.outputs.audit_status == 'vulnerabilities_found'
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: composer-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Create Security Issue
        if: steps.audit.outputs.audit_status == 'vulnerabilities_found' && github.event_name == 'schedule'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            
            const title = 'üîí Security Vulnerabilities Detected';
            const body = `
            ## Security Audit Report
            
            Automated security scan detected vulnerabilities in project dependencies.
            
            **Scan Date:** ${new Date().toISOString()}
            **Trigger:** Scheduled scan
            
            ### Action Required
            
            Please review the attached audit results and update affected dependencies.
            
            ### Audit Results
            
            \`\`\`json
            ${JSON.stringify(auditResults, null, 2)}
            \`\`\`
            
            ### Next Steps
            
            1. Review each vulnerability listed above
            2. Update affected packages to secure versions
            3. Run \`composer audit\` locally to verify fixes
            4. Test the application thoroughly after updates
            
            ---
            *This issue was created automatically by the security audit workflow.*
            `;
            
            // Check if a similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security Vulnerabilities Detected')
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Updated Security Scan Results\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'dependencies', 'automated']
              });
            }

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Initialize CodeQL
        uses: github/codeql-action/init@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          languages: php
          queries: +security-and-quality,security-experimental

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: '8.4'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          category: "/language:php"

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9f24ebd4 # v0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@b98d498629f1c368650479d6e3841b2a5b61eace # master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=composer.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        if: always()
        with:
          sarif_file: snyk.sarif

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@3c5e6c7bf996e49b5b41db7bb90b0e3e73c8e4c8 # v3.82.8
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@cb7149e1af10b4e8bd0c82bc8e87aabde93fe1c5 # v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: '8.4'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Check licenses
        run: |
          echo "Checking package licenses..."
          
          # Get all packages and their licenses
          composer licenses --format=json > licenses.json
          
          # Check for prohibited licenses
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          
          for license in "${PROHIBITED_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "‚ùå Prohibited license found: $license"
              exit 1
            fi
          done
          
          echo "‚úÖ All licenses are compliant"

      - name: Upload license report
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [composer-audit, codeql-analysis, dependency-scanning, secrets-scan, license-check]
    if: always()

    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Audit Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "| Check | Status |" >> security-summary.md
          echo "|-------|--------|" >> security-summary.md
          echo "| Composer Audit | ${{ needs.composer-audit.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
          echo "| Dependency Scanning | ${{ needs.dependency-scanning.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
          echo "| Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          
          cat security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('Security Audit Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
