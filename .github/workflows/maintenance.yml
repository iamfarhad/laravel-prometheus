name: Maintenance

on:
  schedule:
    # Run maintenance checks every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of maintenance check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - performance
          - compatibility

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'dependencies'

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: '8.4'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-maintenance
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "Checking for outdated dependencies..."
          
          # Get outdated packages
          if composer outdated --format=json > outdated.json; then
            OUTDATED_COUNT=$(jq '.installed | length' outdated.json)
            echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
            
            if [[ $OUTDATED_COUNT -gt 0 ]]; then
              echo "has_outdated=true" >> $GITHUB_OUTPUT
              echo "Found $OUTDATED_COUNT outdated packages"
            else
              echo "has_outdated=false" >> $GITHUB_OUTPUT
              echo "All dependencies are up to date"
            fi
          else
            echo "has_outdated=false" >> $GITHUB_OUTPUT
            echo "Could not check outdated dependencies"
          fi

      - name: Update dev dependencies
        if: steps.outdated.outputs.has_outdated == 'true'
        run: |
          echo "Updating development dependencies..."
          
          # Update dev dependencies only (safer for automated updates)
          composer update --dev --prefer-stable --with-dependencies
          
          # Check if there are changes
          if git diff --quiet composer.lock; then
            echo "No changes to commit"
          else
            echo "Dependencies were updated"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add composer.lock
            git commit -m "⬆️ Update development dependencies"
          fi

      - name: Create dependency update PR
        if: steps.outdated.outputs.has_outdated == 'true'
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "⬆️ Update dependencies"
          title: "⬆️ Automated dependency updates"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates to project dependencies.
            
            ### Changes
            
            - Updated development dependencies to latest compatible versions
            - All updates follow semantic versioning constraints
            
            ### Verification
            
            - [ ] Review updated packages in `composer.lock`
            - [ ] Ensure all tests pass
            - [ ] Check for any breaking changes in updated packages
            
            ### Outdated Packages
            
            ```json
            ${{ steps.outdated.outputs.has_outdated && 'See outdated.json artifact' || 'No outdated packages found' }}
            ```
            
            ---
            *This PR was created automatically by the maintenance workflow.*
          branch: maintenance/dependency-updates
          delete-branch: true
          labels: |
            maintenance
            dependencies
            automated

      - name: Upload outdated packages report
        if: steps.outdated.outputs.has_outdated == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: outdated-dependencies
          path: outdated.json
          retention-days: 7

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance'

    strategy:
      matrix:
        php: ['8.2', '8.3', '8.4']

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis, apcu, xdebug
          coverage: none
          tools: composer:v2
          ini-values: memory_limit=1024M

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks for PHP ${{ matrix.php }}..."
          
          # Create a simple benchmark script
          cat > benchmark.php << 'EOF'
          <?php
          require_once 'vendor/autoload.php';
          
          // Benchmark key operations
          $iterations = 1000;
          $results = [];
          
          // Test metric creation
          $start = microtime(true);
          for ($i = 0; $i < $iterations; $i++) {
              // Simulate metric operations
              $data = ['metric' => 'test', 'value' => $i];
              json_encode($data);
          }
          $results['metric_creation'] = microtime(true) - $start;
          
          // Test memory usage
          $results['memory_usage'] = memory_get_peak_usage(true);
          $results['memory_usage_formatted'] = number_format($results['memory_usage'] / 1024 / 1024, 2) . ' MB';
          
          // Output results
          echo json_encode($results, JSON_PRETTY_PRINT);
          EOF
          
          php benchmark.php > performance-php${{ matrix.php }}.json

      - name: Upload performance results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: performance-results-php${{ matrix.php }}
          path: performance-php${{ matrix.php }}.json
          retention-days: 30

  compatibility-check:
    name: Compatibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'compatibility'

    strategy:
      matrix:
        include:
          - php: '8.2'
            laravel: '10.*'
            testbench: '8.*'
          - php: '8.3'
            laravel: '11.*'
            testbench: '9.*'
          - php: '8.4'
            laravel: '12.*'
            testbench: '10.*'

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, redis, apcu
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
          composer update --prefer-stable --prefer-dist --no-interaction

      - name: Run compatibility tests
        run: |
          echo "Testing compatibility with PHP ${{ matrix.php }} and Laravel ${{ matrix.laravel }}..."
          
          # Run a subset of tests focused on compatibility
          ./vendor/bin/phpunit tests/Unit/ --verbose --no-coverage
          
          echo "✅ Compatibility test passed for PHP ${{ matrix.php }} + Laravel ${{ matrix.laravel }}"

      - name: Generate compatibility report
        run: |
          cat > compatibility-report.json << EOF
          {
            "php_version": "${{ matrix.php }}",
            "laravel_version": "${{ matrix.laravel }}",
            "testbench_version": "${{ matrix.testbench }}",
            "status": "compatible",
            "test_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload compatibility report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: compatibility-php${{ matrix.php }}-laravel${{ matrix.laravel }}
          path: compatibility-report.json
          retention-days: 30

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."
          
          # Check for required documentation files
          REQUIRED_FILES=("README.md" "CHANGELOG.md" "LICENSE")
          MISSING_FILES=()
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              MISSING_FILES+=("$file")
            fi
          done
          
          if [[ ${#MISSING_FILES[@]} -gt 0 ]]; then
            echo "❌ Missing documentation files: ${MISSING_FILES[*]}"
          else
            echo "✅ All required documentation files present"
          fi
          
          # Check README structure
          if [[ -f "README.md" ]]; then
            echo "Checking README.md structure..."
            
            REQUIRED_SECTIONS=("Installation" "Usage" "Configuration")
            for section in "${REQUIRED_SECTIONS[@]}"; do
              if ! grep -q "## $section" README.md; then
                echo "⚠️ README.md missing section: $section"
              fi
            done
          fi

      - name: Check code documentation
        run: |
          echo "Checking code documentation coverage..."
          
          # Simple check for PHPDoc comments
          find src/ -name "*.php" -exec grep -L "@param\|@return\|@throws" {} + > undocumented.txt || true
          
          if [[ -s undocumented.txt ]]; then
            echo "⚠️ Files with missing PHPDoc:"
            cat undocumented.txt
          else
            echo "✅ All PHP files have documentation"
          fi

  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Check for large files
        run: |
          echo "Checking for large files..."
          
          # Find files larger than 1MB
          find . -type f -size +1M -not -path "./vendor/*" -not -path "./.git/*" > large-files.txt || true
          
          if [[ -s large-files.txt ]]; then
            echo "⚠️ Large files detected:"
            cat large-files.txt
          else
            echo "✅ No large files found"
          fi

      - name: Check for temporary files
        run: |
          echo "Checking for temporary files..."
          
          # Find common temporary file patterns
          find . -name "*.tmp" -o -name "*.log" -o -name ".DS_Store" -not -path "./vendor/*" -not -path "./.git/*" > temp-files.txt || true
          
          if [[ -s temp-files.txt ]]; then
            echo "⚠️ Temporary files found:"
            cat temp-files.txt
          else
            echo "✅ No temporary files found"
          fi

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-updates, performance-analysis, compatibility-check, documentation-check, cleanup]
    if: always()

    steps:
      - name: Generate maintenance report
        run: |
          echo "# Maintenance Report" > maintenance-report.md
          echo "" >> maintenance-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> maintenance-report.md
          echo "" >> maintenance-report.md
          echo "| Task | Status |" >> maintenance-report.md
          echo "|------|--------|" >> maintenance-report.md
          echo "| Dependency Updates | ${{ needs.dependency-updates.result == 'success' && '✅ Completed' || needs.dependency-updates.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> maintenance-report.md
          echo "| Performance Analysis | ${{ needs.performance-analysis.result == 'success' && '✅ Completed' || needs.performance-analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> maintenance-report.md
          echo "| Compatibility Check | ${{ needs.compatibility-check.result == 'success' && '✅ Completed' || needs.compatibility-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> maintenance-report.md
          echo "| Documentation Check | ${{ needs.documentation-check.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> maintenance-report.md
          echo "| Repository Cleanup | ${{ needs.cleanup.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> maintenance-report.md
          echo "" >> maintenance-report.md
          
          cat maintenance-report.md

      - name: Create maintenance issue
        if: github.event_name == 'schedule' && (needs.dependency-updates.result == 'failure' || needs.performance-analysis.result == 'failure' || needs.compatibility-check.result == 'failure')
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('maintenance-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔧 Maintenance Issues Detected',
              body: `${report}\n\n---\n*This issue was created automatically by the maintenance workflow.*`,
              labels: ['maintenance', 'automated']
            });
